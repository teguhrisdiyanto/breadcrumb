// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/address/v1/address.proto

package addressv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressAPIClient is the client API for AddressAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressAPIClient interface {
	// ByID get address by id.
	ByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*ByIDResponse, error)
	// Fetch fetch list of address with filter.
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// Fetchone fetch first of address with filter.
	FetchOne(ctx context.Context, in *FetchOneRequest, opts ...grpc.CallOption) (*FetchOneResponse, error)
	// Create create address.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Update update address.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete address by id.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type addressAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressAPIClient(cc grpc.ClientConnInterface) AddressAPIClient {
	return &addressAPIClient{cc}
}

func (c *addressAPIClient) ByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*ByIDResponse, error) {
	out := new(ByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/ByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressAPIClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressAPIClient) FetchOne(ctx context.Context, in *FetchOneRequest, opts ...grpc.CallOption) (*FetchOneResponse, error) {
	out := new(FetchOneResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/FetchOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressAPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressAPIClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.address.v1.AddressAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressAPIServer is the server API for AddressAPI service.
// All implementations must embed UnimplementedAddressAPIServer
// for forward compatibility
type AddressAPIServer interface {
	// ByID get address by id.
	ByID(context.Context, *ByIDRequest) (*ByIDResponse, error)
	// Fetch fetch list of address with filter.
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// Fetchone fetch first of address with filter.
	FetchOne(context.Context, *FetchOneRequest) (*FetchOneResponse, error)
	// Create create address.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Update update address.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete address by id.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAddressAPIServer()
}

// UnimplementedAddressAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAddressAPIServer struct {
}

func (UnimplementedAddressAPIServer) ByID(context.Context, *ByIDRequest) (*ByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByID not implemented")
}
func (UnimplementedAddressAPIServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedAddressAPIServer) FetchOne(context.Context, *FetchOneRequest) (*FetchOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOne not implemented")
}
func (UnimplementedAddressAPIServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAddressAPIServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAddressAPIServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAddressAPIServer) mustEmbedUnimplementedAddressAPIServer() {}

// UnsafeAddressAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressAPIServer will
// result in compilation errors.
type UnsafeAddressAPIServer interface {
	mustEmbedUnimplementedAddressAPIServer()
}

func RegisterAddressAPIServer(s grpc.ServiceRegistrar, srv AddressAPIServer) {
	s.RegisterService(&AddressAPI_ServiceDesc, srv)
}

func _AddressAPI_ByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).ByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/ByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).ByID(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressAPI_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressAPI_FetchOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).FetchOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/FetchOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).FetchOne(ctx, req.(*FetchOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.address.v1.AddressAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressAPI_ServiceDesc is the grpc.ServiceDesc for AddressAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.address.v1.AddressAPI",
	HandlerType: (*AddressAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByID",
			Handler:    _AddressAPI_ByID_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _AddressAPI_Fetch_Handler,
		},
		{
			MethodName: "FetchOne",
			Handler:    _AddressAPI_FetchOne_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AddressAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AddressAPI_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AddressAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/address/v1/address.proto",
}
